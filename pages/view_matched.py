# pages/review_matched.py
"""
‡∏´‡∏ô‡πâ‡∏≤ Review Matched (‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á)
--------------------------------
‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
‚Ä¢ ‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Priority ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Invite
‚Ä¢ Invite = ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheet `matches` (status = invited)
"""

from __future__ import annotations

import json
import uuid
from datetime import datetime
from pathlib import Path

import gspread
import pandas as pd
import streamlit as st
from oauth2client.service_account import ServiceAccountCredentials

# ------------------------------------------------------------------
# 0) Guard: ‡∏ï‡πâ‡∏≠‡∏á Login ‡πÅ‡∏•‡∏∞‡∏°‡∏µ job_idx & recs ‡πÉ‡∏ô session
# ------------------------------------------------------------------
if not st.session_state.get("logged_in", False):
    st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡∏Å‡πà‡∏≠‡∏ô")
    st.stop()

job_idx: int | None = st.session_state.get("job_idx")
recs: pd.DataFrame | None = st.session_state.get("recs_df")  # ‡∏à‡∏≤‡∏Å Result Matching.py

if job_idx is None or recs is None:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏• AI Matching ‡∏Å‡πà‡∏≠‡∏ô")
    st.page_link("pages/Result Matching.py", "‡∏î‡∏π‡∏ú‡∏• AI Matching ‚ûú")
    st.stop()

# ------------------------------------------------------------------
# 1) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Google‚ÄëSheets helper
# ------------------------------------------------------------------
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
creds_json = json.loads(st.secrets["gcp"]["credentials"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
client = gspread.authorize(creds)
sh = client.open("fastlabor")

jobs_ws     = sh.worksheet("post_job")
matches_ws  = sh.worksheet("matches")

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• row ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
jobs_df = pd.DataFrame(jobs_ws.get_all_values()[1:], columns=jobs_ws.get_all_values()[0])
job_row = jobs_df.iloc[job_idx]

st.title("üìã Review Matched ‚Äì ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô")
st.markdown(f"**‡∏á‡∏≤‡∏ô** : `{job_row['job_type']}` ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {job_row['job_date']}  (Job‚ÄëID: {job_row['job_id']})")

# ------------------------------------------------------------------
# 2) Loop ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
# ------------------------------------------------------------------
invited_cnt = 0

for i, row in recs.iterrows():
    with st.expander(f"{i+1}. {row['worker_id']} ‚Äì {row['job_type']}"):
        st.write(f"- **Email** : {row['email']}")
        st.write(f"- **Expected Wage** : {row['exp_wage']:.0f} THB")
        st.write(f"- **AI Score** : {row['ai_score']:.3f}")

        pr = st.selectbox("Priority", [1, 2, 3, 4, 5], key=f"prio_{i}")
        if st.button("üì® Invite", key=f"invite_{i}"):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á match_id ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            match_id = str(uuid.uuid4())[:8]
            matches_ws.append_row([
                match_id,
                job_row["job_id"],
                row["worker_id"],
                pr,
                "invited",
                f"{row['ai_score']:.4f}",
                datetime.utcnow().isoformat(sep=" ", timespec="seconds")
            ])
            st.success("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            invited_cnt += 1

if invited_cnt:
    st.toast(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÅ‡∏•‡πâ‡∏ß {invited_cnt} ‡∏Ñ‡∏ô", icon="‚úÖ")
    st.page_link("pages/list_job.py", label="‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ My Jobs ‚ûú")
