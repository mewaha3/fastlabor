import streamlit as st
import gspread
import json
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

try:
    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Credentials ‡∏à‡∏≤‡∏Å Streamlit Secrets (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud)
    if "gcp" in st.secrets:
        credentials_dict = json.loads(st.secrets["gcp"]["credentials"])
        creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
    else:
        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Credentials ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Local)
        creds = ServiceAccountCredentials.from_json_keyfile_name("pages/credentials.json", scope)

    # ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
    client = gspread.authorize(creds)
    sheet = client.open("fastlabor").sheet1  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Google Sheets ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets
    data = sheet.get_all_records()
    df = pd.DataFrame(data)

except Exception as e:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets: {e}")
    st.stop()

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if "logged_in" not in st.session_state:
    st.session_state["logged_in"] = False
if "email" not in st.session_state:
    st.session_state["email"] = None

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Streamlit
st.set_page_config(page_title="Fast Labor Login", page_icon="üîß", layout="centered")

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Custom CSS ‡πÉ‡∏´‡πâ UI ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
st.markdown("""
    <style>
        body {
            background-color: #f4f7fc;
        }
        .login-container {
            max-width: 420px;
            margin: auto;
            padding: 2.5rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .stTextInput, .stButton {
            margin-bottom: 15px;
        }
        .login-title {
            font-size: 28px;
            font-weight: bold;
            color: #4F8BF9;
        }
        .login-subtitle {
            font-size: 16px;
            color: #6c757d;
        }
        .login-btn {
            background-color: #4F8BF9 !important;
            color: white !important;
            width: 100%;
            border-radius: 8px;
            padding: 10px;
            font-size: 18px;
        }
        .login-btn:hover {
            background-color: #357ABD !important;
        }
        .login-footer {
            font-size: 14px;
            color: #6c757d;
            margin-top: 15px;
        }
        .link-btn {
            font-size: 16px;
            color: #4F8BF9;
            text-decoration: none;
        }
        .link-btn:hover {
            color: #357ABD;
            text-decoration: underline;
        }
    </style>
""", unsafe_allow_html=True)

# ‚úÖ LOGO & TITLE
st.image("image.png", width=150)  # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ
st.markdown('<div class="login-title">FAST LABOR</div>', unsafe_allow_html=True)
st.markdown('<div class="login-subtitle">FAST JOB, FULL TRUST, GREAT WORKER</div>', unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

# ‚úÖ ‡∏Å‡∏•‡πà‡∏≠‡∏á Login ‡πÅ‡∏ö‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏¥‡∏£‡πå‡∏ô
with st.container():
    st.markdown('<div class="login-container">', unsafe_allow_html=True)

    # ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏° Login
    email = st.text_input("Email address/Username", placeholder="email@example.com")
    password = st.text_input("Password", type="password", placeholder="Enter your password")

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Login
    if st.button("Login", key="login_btn", help="Click to login", use_container_width=True):
        if email and password:
            if email in df["email"].values and df[df["email"] == email]["password"].values[0] == password:
                st.session_state["logged_in"] = True
                st.session_state["email"] = email
                st.success(f"‚úÖ Welcome, {email}!")

                # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
                st.switch_page("pages/home.py")
            else:
                st.error("‚ùå Invalid email or password. Please try again.")
        else:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")

    # ‚úÖ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Forget Password
    st.markdown('<a class="link-btn" href="pages/reset_password.py">üîë Forget password?</a>', unsafe_allow_html=True)

    st.markdown('<div class="login-footer">or</div>', unsafe_allow_html=True)

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Register
    st.markdown('<a class="link-btn" href="pages/register.py">üìù New Register</a>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)
